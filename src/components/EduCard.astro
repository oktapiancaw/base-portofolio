---
import type { EducationType } from "../constant/schema.types";
import { formatDateRange } from "../lib/formatter";

interface Props {
  education: EducationType;
}

const { education } = Astro.props;
---

<div
  class="flex w-full flex-col flex-1 space-y-2 px-4 pt-3 pb-6 shadow-lg shadow-gray-200/20 dark:shadow-gray-950/20 rounded-md border border-gray-200 from-gray-50/20 to-gray-200/20 dark:border-gray-900 bg-gradient-to-b dark:from-gray-900/20 dark:to-gray-950/20"
>
  <div class="flex flex-row flex-wrap gap-y-1 justify-between items-center">
    <p class="font-semibold text-gray-800 dark:text-gray-100 text-base sm:text-lg">
      {education.degree ? education.degree + " of " + education.field : education.field}
    </p>
    <p class="text-gray-600 text-sm sm:text-base dark:text-gray-500">{
      
        formatDateRange(
          {
            year: "numeric",
          },
          education.start_date,
          education?.end_date ?? "Present"
        )
      }</p>
  </div>
  <div class="flex items-center space-x-3">
    <p class="font-normal text-gray-600 dark:text-gray-400">
      {education.institution}
    </p>
    {
      education.grade && (
        <span class="hidden sm:block uppercase whitespace-nowrap text-xs p-1.5 bg-gray-200 dark:bg-gray-900">Grade {education.grade}</span>
      )
    }
  </div>
</div>
